syntax = "proto3";
package payment;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/celestiaorg/celestia-app/x/payment/types";

// Msg defines the payment Msg service.
service Msg {
  // PayForData allows the user to pay for the inclusion of a message
  rpc PayForData(MsgPayForData) returns (MsgPayForDataResponse) {
    option (google.api.http).get = "/celestia/payment/payfordata";
  }
}

// MsgWirePayForData describes the format of data that is sent over the wire
// for each PayForData
message MsgWirePayForData {
  string signer = 1;
  bytes message_namespace_id = 2; // assume this is 8 bytes!
  uint64 message_size = 3;
  bytes message = 4;
  // field number 6 is obsolete and was used for `repeated
  // message_share_commitment` when a MsgWirePayForData included multiple
  // message share commitments (one per square size).
  ShareCommitAndSignature message_share_commitment = 7;
}

// MsgWirePayForDataResponse describes the response returned after the
// submission of a WirePayForData
message MsgWirePayForDataResponse {}

// ShareCommitAndSignature is used to verify that a message was included in a
// block via a message inclusion proof. A user must submit one of these with
// their MsgWirePayForData.
message ShareCommitAndSignature {
  // share_commitment is the root of a binary Merkle tree that has leaves which
  // are subtree roots of the relevant message shares in the original data
  // square.
  bytes share_commitment = 2;
  bytes signature = 3; // signature on one SignedTransactionPayForData
}

// MsgPayForData is what gets signed by users when creating
// ShareCommitSignatures.
//  Multiple versions are signed and included, each version creates a commitment
//  for a
// specific square size.
message MsgPayForData {
  string signer = 1;
  bytes message_namespace_id = 2;
  uint64 message_size = 3;
  // message_share_commitment is the share_commitment from
  // ShareCommitAndSignature that will be included in a block
  bytes message_share_commitment = 4;
}

// MsgPayForDataResponse describes the response returned after the submission
// of a PayForData
message MsgPayForDataResponse {}
