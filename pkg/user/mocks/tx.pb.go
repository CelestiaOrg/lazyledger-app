// Code generated by MockGen. DO NOT EDIT.
// Source: app/grpc/tx/tx.pb.go

// Package mock_tx is a generated GoMock package.
package mock_tx

import (
	context "context"
	"fmt"
	reflect "reflect"

	tx "github.com/celestiaorg/celestia-app/v3/app/grpc/tx"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTxClient is a mock of TxClient interface.
type MockTxClient struct {
	ctrl     *gomock.Controller
	recorder *MockTxClientMockRecorder
}

// MockTxClientMockRecorder is the mock recorder for MockTxClient.
type MockTxClientMockRecorder struct {
	mock *MockTxClient
}

// NewMockTxClient creates a new mock instance.
func NewMockTxClient(ctrl *gomock.Controller) *MockTxClient {
	mock := &MockTxClient{ctrl: ctrl}
	mock.recorder = &MockTxClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxClient) EXPECT() *MockTxClientMockRecorder {
	return m.recorder
}

// TxStatus mocks base method.
func (m *MockTxClient) TxStatus(ctx context.Context, in *tx.TxStatusRequest, opts ...grpc.CallOption) (*tx.TxStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TxStatus", varargs...)
	ret0, _ := ret[0].(*tx.TxStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxStatus indicates an expected call of TxStatus.
func (mr *MockTxClientMockRecorder) TxStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	fmt.Println("CALLING MOCK RECORDER")
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxStatus", reflect.TypeOf((*MockTxClient)(nil).TxStatus), varargs...)
}

// MockTxServer is a mock of TxServer interface.
type MockTxServer struct {
	ctrl     *gomock.Controller
	recorder *MockTxServerMockRecorder
}

// MockTxServerMockRecorder is the mock recorder for MockTxServer.
type MockTxServerMockRecorder struct {
	mock *MockTxServer
}

// NewMockTxServer creates a new mock instance.
func NewMockTxServer(ctrl *gomock.Controller) *MockTxServer {
	mock := &MockTxServer{ctrl: ctrl}
	mock.recorder = &MockTxServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxServer) EXPECT() *MockTxServerMockRecorder {
	return m.recorder
}

// TxStatus mocks base method.
func (m *MockTxServer) TxStatus(arg0 context.Context, arg1 *tx.TxStatusRequest) (*tx.TxStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxStatus", arg0, arg1)
	ret0, _ := ret[0].(*tx.TxStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxStatus indicates an expected call of TxStatus.
func (mr *MockTxServerMockRecorder) TxStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxStatus", reflect.TypeOf((*MockTxServer)(nil).TxStatus), arg0, arg1)
}
